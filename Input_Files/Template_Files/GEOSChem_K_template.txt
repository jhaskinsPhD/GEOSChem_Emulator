function K = GEOSCHEM_K(Met) 
%  This function calculates the rate constants used in the 
% **MECHANISM_NAME** mechanism in F0AM. 
% 
% FILE ORIGIN: 
%    This MATLAB function was autogenerated by JDH's "GEOS-Chem Emulator" 
%    on **THE_DATE** after parsing the following kpp file:
%        **KPP_FILENAME**
% 
% INPUTS: 
%   (1) Met: A structure containing environment variables (indexed in time) 
%				used to calculate these rates like: 
%
%             Met.T: Temperature in K (can be scalar or column vector) 
% 
% OUTPUTS: 
%    (1) K: structure of rate constants. Each is size length(Met.T) x 1 
%
% List of all rate functions referenced in this file that must be imported for 
% for this mechanism to work. This import should be automatically done for you, 
% using import_GC_rates() so this list is just for your reference.
%
%    **LIST_OF_RATE_FUNCTS**

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%    Initialize Rate Vars/Functions    %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define the total number of rate constants 
nk = **NUMBER_OF_RATE_CONSTANTS**; 

% Create Empty matrix of Nans:  len = # of dif conditions (aka time)
%                             width = # of rate constants
krx = nan(length(T),nk);  

% Create an empy cell of "Knames" that will correspond to the column of this rate in krx 
%( A hacky way to define a dictionary before MATLAB implemented them in v2022b... )
Knames = cell(nk,1); 

% Import dictionary containing rate functions(key=function name, value=function HANDLE)
out = import_GC_rates({'all'});

% Unpack function names/handles from the rate dictionary we just imported so we 
% actually use these functions in this file! 
**IMPORT_RATES_CALL**

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%    BEGIN RATE DEFINITIONS    %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
i=0; % Set initial counter var for rates... 

**INSERT_RATE_DEFINITIONS** 

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%    ACCUMULATE INTO STRUCT    %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Check that lens are consistent before putting names/values into the output struct, K. 
if length(Knames) ~= length(krx(:,1))
	error('In GEOSCHEM_K.m, the vars "Knames" and "krx" are not the same length! Will lead to mismatch in rates used!)
end

% Accumulate all the rate names/values into our wanna be rate dictionary, the output struct, K. 
K = struct;
for i=1:length(Knames)
    K.(Knames{i}) = krx(:,i);
end